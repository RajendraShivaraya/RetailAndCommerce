// <auto-generated />
namespace Rajendra.Commerce.RetailProxy.Extension
{
    using System;
    using System.CodeDom.Compiler;
    using System.Collections.Generic;
    using System.Collections.ObjectModel;
    using System.IO;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.Dynamics.Commerce.RetailProxy;
    
    /// <summary>
    /// Class implements Store Operations Manager.
    /// </summary>
    [GeneratedCodeAttribute("Rajendra.Commerce.RetailProxy.Extension", "1.0")]
    internal class StoreOperationsManager : IStoreOperationsManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="StoreOperationsManager"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public StoreOperationsManager(IContext context)
        {
            this.context = context;
        }
    
        
        /// <summary>
        /// RajSamplePost method.
        /// </summary>
        /// <returns>bool object.</returns>
        public async Task<bool> RajSamplePost()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "",
                "StoreOperations",
                "RajSamplePost",
                true, null);
        }
        
        /// <summary>
        /// RajSampleGet method.
        /// </summary>
        /// <returns>bool object.</returns>
        public async Task<bool> RajSampleGet()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "",
                "StoreOperations",
                "RajSampleGet",
                false, null);
        }
        
    }
    
    /// <summary>
    /// Class implements RajStoreDayHoursEntity Manager.
    /// </summary>
    [GeneratedCodeAttribute("Rajendra.Commerce.RetailProxy.Extension", "1.0")]
    internal class RajStoreDayHoursEntityManager : IRajStoreDayHoursEntityManager
    {
        private IContext context;

        /// <summary>
        /// Initializes a new instance of the <see cref="RajStoreDayHoursEntity"/> class.
        /// </summary>
        /// <param name="context">The context.</param>
        public RajStoreDayHoursEntityManager(IContext context)
        {
            this.context = context;
        }

        /// <summary>
        /// Creates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity after creation.</returns>
        public async Task<RajStoreDayHoursEntity> Create(RajStoreDayHoursEntity entity)
        {
            return await this.context.Create<RajStoreDayHoursEntity>("RajendraEntityAPI", entity);
        }

        /// <summary>
        /// Reads the entity with specified identifier.
        /// </summary>
        /// <param name="id">The id.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The entity.</returns>
        public async Task<RajStoreDayHoursEntity> Read(long id, ICollection<string> expandProperties = null)
        {
            return await this.context.Read<RajStoreDayHoursEntity>(
                    "RajendraEntityAPI",
                    e => e.Id == id,
                    expandProperties,
                    OperationParameter.Create("Id", id, true));
        }
      
        /// <summary>
        /// Read all entities with specified query settings.
        /// </summary>
        /// <param name="queryResultSettings">The query result settings.</param>
        /// <param name="expandProperties">The navigation properties to be expanded.</param>
        /// <returns>The collection of entities.</returns>
        public async Task<PagedResult<RajStoreDayHoursEntity>> ReadAll(QueryResultSettings queryResultSettings, ICollection<string> expandProperties = null)
        {
            return await this.context.ReadAll<RajStoreDayHoursEntity>("RajendraEntityAPI", expandProperties, queryResultSettings);
        }

        /// <summary>
        /// Updates the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>The updated entity.</returns>
        public async Task<RajStoreDayHoursEntity> Update(RajStoreDayHoursEntity entity)
        {
            return await this.context.Update<RajStoreDayHoursEntity>("RajendraEntityAPI", entity);
        }

        /// <summary>
        /// Deletes the specified entity.
        /// </summary>
        /// <param name="entity">The entity.</param>
        /// <returns>No return.</returns>
        public async Task Delete(RajStoreDayHoursEntity entity)
        {
            await this.context.Delete<RajStoreDayHoursEntity>("RajendraEntityAPI", entity);
        }
        
        // Operations
        
        /// <summary>
        /// GetStoreHoursByRecId method.
        /// </summary>
        /// <param name="storeNumber">The storeNumber.</param>
        /// <param name="queryResultSettings">The queryResultSettings.</param>
        /// <returns>Collection of RajStoreDayHoursEntity.</returns>
        public async Task<PagedResult<RajStoreDayHoursEntity>> GetStoreHoursByRecId(string storeNumber, QueryResultSettings queryResultSettings = null)
        {       
            return await this.context.ExecuteOperationAsync<RajStoreDayHoursEntity>(
                "RajendraEntityAPI",
                "RajStoreDayHoursEntity",
                "GetStoreHoursByRecId",
                true, queryResultSettings, null, OperationParameter.Create("storeNumber", storeNumber, false));
        }
        
        /// <summary>
        /// GetMyName method.
        /// </summary>
        /// <returns>string object.</returns>
        public async Task<string> GetMyName()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<string>(
                "RajendraEntityAPI",
                "RajStoreDayHoursEntity",
                "GetMyName",
                false, null);
        }
        
        /// <summary>
        /// GetSampleForBoolean method.
        /// </summary>
        /// <returns>bool object.</returns>
        public async Task<bool> GetSampleForBoolean()
        {       
            return await this.context.ExecuteOperationSingleResultAsync<bool>(
                "RajendraEntityAPI",
                "RajStoreDayHoursEntity",
                "GetSampleForBoolean",
                false, null);
        }
        
    }
    
 }
