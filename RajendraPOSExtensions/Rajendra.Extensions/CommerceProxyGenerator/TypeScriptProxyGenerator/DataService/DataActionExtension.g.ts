
    /*!
    * Copyright (c) Microsoft Corporation.
    * All rights reserved. See LICENSE in the project root for license information.
    * THIS FILE IS AN AUTOGENERATED TYPESCRIPT PROXY EXTENSION.
    * TO USE THIS FILE, IT MUST BE ADDED TO A D365COMMERCE APPLICATION
    */
    import {
        AsyncResult,
        callActionOrExecute,
        DataServiceQuery,
        IContext,
        IDataServiceRequest,
        IQueryResultSettings,
        // @ts-ignore -- Unused import
        NullResult
    } from '@msdyn365-commerce/retail-proxy';
    // @ts-ignore -- Unused import
    import * as EntityClasses from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceModels.g';
    // @ts-ignore -- Unused import
    import * as Entities from '@msdyn365-commerce/retail-proxy/dist/Entities/CommerceTypes.g';
    import * as DataServiceEntities from './DataServiceEntities.g';

    
    function rajSamplePostFromCommonProjectQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function rajSamplePostFromCommonProjectInput (
        
    ): IDataServiceRequest {
      const query = rajSamplePostFromCommonProjectQuery();
      return query.createDataServiceRequestForOperation(
          'RajSamplePostFromCommonProject',
          true, 
            ''
          ,
          'false',
          { bypassCache: 'get', returnEntity: '' },
          {
          
          }
      );
    }

    export function rajSamplePostFromCommonProjectAsync (
        context: IContext
        ): AsyncResult<boolean> {
        const request = rajSamplePostFromCommonProjectInput();
        return callActionOrExecute<boolean>(request, context.callerContext);
        }
      
    function rajSampleGetFromCommonProjectQuery(): DataServiceQuery {
          return new DataServiceQuery();
          }

    
    export function rajSampleGetFromCommonProjectInput (
        
    ): IDataServiceRequest {
      const query = rajSampleGetFromCommonProjectQuery();
      return query.createDataServiceRequestForOperation(
          'RajSampleGetFromCommonProject',
          false, 
            ''
          ,
          'false',
          { bypassCache: 'get', returnEntity: '' },
          {
          
          }
      );
    }

    export function rajSampleGetFromCommonProjectAsync (
        context: IContext
        ): AsyncResult<boolean> {
        const request = rajSampleGetFromCommonProjectInput();
        return callActionOrExecute<boolean>(request, context.callerContext);
        }
      

        // @ts-ignore
        function rajendraEntityAPIQuery(id?: number): DataServiceQuery {
        const key = (id) ? { Id: id } :null;
        return new DataServiceQuery("RajendraEntityAPI", "RajStoreDayHoursEntity", DataServiceEntities.RajStoreDayHoursEntityExtensionClass, key);
        }

        
    export function createGetStoreHoursByRecIdFromCommonProjectInput(queryResultSettings: IQueryResultSettings, storeNumber: string): IDataServiceRequest {
    const query = rajendraEntityAPIQuery().resultSettings(queryResultSettings);
    return query.createDataServiceRequestForOperation('GetStoreHoursByRecIdFromCommonProject', true, DataServiceEntities.RajStoreDayHoursEntityExtensionClass, 'true', {bypassCache: 'none', returnEntity: 'DataServiceEntities.IRajStoreDayHoursEntity'}, {storeNumber: storeNumber });
    }

    
    export function getStoreHoursByRecIdFromCommonProjectAsync(context: IContext, storeNumber: string): AsyncResult<DataServiceEntities.IRajStoreDayHoursEntity[]> {
    const request = createGetStoreHoursByRecIdFromCommonProjectInput(
      context.queryResultSettings || {}, storeNumber);
    return callActionOrExecute<DataServiceEntities.IRajStoreDayHoursEntity[]>(request, context.callerContext);
    }
  
    export function createGetMyNameFromCommonProjectInput(): IDataServiceRequest {
    const query = rajendraEntityAPIQuery();
    return query.createDataServiceRequestForOperation('GetMyNameFromCommonProject', false, '', 'false', {bypassCache: 'none', returnEntity: ''}, { });
    }

    
    export function getMyNameFromCommonProjectAsync(context: IContext): AsyncResult<string> {
    const request = createGetMyNameFromCommonProjectInput();
    return callActionOrExecute<string>(request, context.callerContext);
    }
  
    export function createGetSampleForBooleanFromCommonProjectInput(): IDataServiceRequest {
    const query = rajendraEntityAPIQuery();
    return query.createDataServiceRequestForOperation('GetSampleForBooleanFromCommonProject', false, '', 'false', {bypassCache: 'none', returnEntity: ''}, { });
    }

    
    export function getSampleForBooleanFromCommonProjectAsync(context: IContext): AsyncResult<boolean> {
    const request = createGetSampleForBooleanFromCommonProjectInput();
    return callActionOrExecute<boolean>(request, context.callerContext);
    }
  